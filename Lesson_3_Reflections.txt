What happens when you initialize a repository? Why do you need to do it?

Initialing a repository creates a directory where all versions of the file saved to that directory will be saved. Creating a repository is very useful in order to organize files together that relate in some way to the master program. This helps to keep branches of code organized.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging areas is where you put branches of code in when you are still making changes. This allows you to organize what set of codes you want to add to the master by using the staging area to hold them before you commit all of the different sets of codes to the master. This is valuable because it helps to organize sets of codes as you continue to make changes allowing you to commit all sets of codes to the master at once, eliminating confusion.

How can you use the staging area to make sure you have one commit per logical
change?

You can use the staging area to ensure that you make a commit for EVERY logical change by adding or removing any changes from code from a logical change in order to ensure you have one commit per logical change before you commit the code to the master.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

A new branch would be used if you are adding some code that could break the program so you do not want to add it to the master. This helps you view the chronological progress of your program and errors that may have occurred in certain branches allowing you to only use working branches in your master.

How do the diagrams help you visualize the branch structure?

Diagrams of the branch structure allow you to view the history and sequence of commits added to each branch allowing for visual representation of the sequence of code in your program or branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together essentially puts two sets of code from each branch into on program where those two branches of code coexist and work together.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Automatically merging branches can save time because the programmer does not have to physically merge every single branch together, however, the automatic merging is not perfect and can create the program to fail by merging two branches that were not supposed to be merged.
